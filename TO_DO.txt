TO DO:

CHECKLIST FOR TYPE CHECKING:

FUNC: parameters and local vars are in the same scope

IF, SWITCH: conditions can be aliases of bool.

INC/DEC should also work with Float and rune.

PRINT/PRINTLN:  will accept only basic types (int, float64, bool, rune, string and type aliases of those types); slices, arrays and structs cannot be passed to print and println 


assignment compatibility:
have to be the exact types on both sides.


Utilities:

- a tool to automatically remove the ast crap from the parsesr file will be nice.
        - Don't remove it (obviously.) Write the output to a separate file. [DONE]

- We need more tests. [See dev/deep_dev_notes for a list of tests used for development. Also working on a automated test suite right now.]


++++++++++

fix line numbers [DONE]
fix parser [DONE]
fix semicolon insertion [DONE]
fix ast [DONE]
fix pretty print 
Create typed ast for type checker to create


- All valid instead of valid for every single test file
- Have a file with no ending newline and check if the semicolon rule still works [This DOES NOT WORK. Fixing this is non straightforward. Need to check with the TA is this is an issue.]

weeder todo:
- Break and continue outside loops are not allowed. [DONE]
- Default statement count check [DONE]
- Weeding for assignment[DONE], variable decl[DONE] , and inc/decr[DONE]
We no longer have lvalues since that was a massive parsing PITA
(In particular, I could not get `(x)[0] = 1` to parse).
So weeder needs to take care of lvalue checking.
- Weed custom type of blank id
- Weed out short variable decl in for loop post statement
- Weed out blank statement rule.  For example, these are not allowed:
    x = _
    x := _
    var x int = _
There might be more such rules. 

- Note that in the real go compiler, this passes fine: 
```
func foo(_, _ int) { } 
```
while this has an duplicate argument error:
```
func foo(a, a int) { } 
```
Rejection for the second one should be done by typechecker.

for type checking:

function: parameters and local vars are in the same scope

assignment compatibility:
have to be the exact types on both sides.
